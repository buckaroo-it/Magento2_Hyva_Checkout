<?php

declare(strict_types=1);
/** @var Escaper $escaper */
/** @var \Buckaroo\HyvaCheckout\Magewire\Checkout\Payment\Method\Creditcards $magewire */

use Magento\Framework\Escaper;

?>
<div class="col-span-6">

    <form x-data="Object.assign(hyva.formValidation($el), {
                    issuerImages: [],
                    cseHasLoaded: window.buckarooCseHasLoaded,
                    cardHolder: '',
                    cardNumber: '',
                    cardExpiration: '',
                    cardCvc:'',
                    async saveEncryptedData() {
                        let parts = this.cardExpiration.split('/');
                        const year = parts[1];
                        const month = parts[0];
                        const wire = this.$wire;
                        const enc = new Promise((resolve) => {
                            BuckarooClientSideEncryption.V001.encryptCardData(
                                this.cardNumber,
                                year,
                                month,
                                this.cardCvc,
                                this.cardHolder,
                                function(encryptedCardData) {
                                    resolve(encryptedCardData);
                                });
                        })
                        return await enc;
                    },
                    register() {
                        this.issuerImages = this.$wire.get('issuerImages');
                        window.addEventListener('buckaroo-cse-load', () => {
                            this.cseHasLoaded = true;
                        }, {
                            once: true
                        })

                        const formValid = async () => {
                            try {
                                await this.validate();
                            } catch (error) {
                                return false;
                            }
                            return true;
                        }
                        window.buckarooTask = async () => {
                            const isValid = await formValid();
                            if (this.cseHasLoaded && isValid) {
                                const encryptedCardData = await this.saveEncryptedData();
                                await this.$wire.updatedEncryptedData(
                                    encryptedCardData,
                                    this.determineIssuer(this.cardNumber)
                                );
                            }
                        };

                    },
                    getIssuerImage: function() {
                        const defaultImage = '<?= $this->getViewFileUrl('Buckaroo_Magento2::images/svg/creditcards.svg') ?>';
                        const issuer = this.determineIssuer(this.cardNumber);
                        if(
                            issuer !== null &&
                            this.issuerImages[issuer] !== undefined
                        ) {
                            return this.issuerImages[issuer];
                        }
                        return defaultImage;
                    },
                    determineIssuer: function (cardNumber) {
                        var issuers = {
                            'amex': {
                                'regex': '^3[47][0-9]{13}$',
                                'name': 'American Express'
                            },
                            'maestro': {
                                'regex': '^(5018|5020|5038|6304|6759|6761|6763)[0-9]{8,15}$',
                                'name': 'Maestro'
                            },
                            'dankort': {
                                'regex': '^(5019|4571)[0-9]{12}$',
                                'name': 'Dankort'
                            },
                            'mastercard': {
                                'regex': '^(5[1-5]|2[2-7])[0-9]{14}$',
                                'name': 'Mastercard'
                            },
                            'visaelectron': {
                                'regex': '^(4026[0-9]{2}|417500|4508[0-9]{2}|4844[0-9]{2}|4913[0-9]{2}|4917[0-9]{2})[0-9]{10}$',
                                'name': 'Visa Electron'
                            },
                            'visa': {
                                'regex': '^4[0-9]{12}(?:[0-9]{3})?$',
                                'name': 'Visa'
                            }
                        };

                        for (var key in issuers) {
                            if (cardNumber !== undefined && cardNumber.match(issuers[key].regex)) {
                                return key;
                            }
                        }

                        return null;
                    }
                })" x-init="register()" novalidate>
        <div class="flex flex-col gap-y-2 field field-reserved">
            <label for="buckaroo_creditcards_card_holder">
                <?= $escaper->escapeHtml(__('Name on card:')); ?>
                <span class="text-red">*</span>
            </label>
            <input type="text"
            x-model="cardHolder"
            data-validate='{"bk-validateCardHolderName": true}'
            @change="onChange" id="buckaroo_creditcards_card_holder"
            name="buckaroo_creditcards_card_holder"
            placeholder="<?= $escaper->escapeHtml(__('John Doe')); ?>" />
        </div>

        <div class="flex flex-col gap-y-2 field field-reserved">
            <label for="buckaroo_creditcards_card_number">
                <?= $escaper->escapeHtml(__('Card number:')); ?>
                <span class="text-red">*</span>
            </label>
            <div class="relative w-full">
                <input
                    type="text"
                    class="w-full"
                    maxlength="23"
                    x-model="cardNumber"
                    data-validate='{"bk-validateCardNumber": true}'
                    @change="onChange" id="buckaroo_creditcards_card_number"
                    name="buckaroo_creditcards_card_number"
                    placeholder="<?= $escaper->escapeHtml(__('0000 0000 0000 0000')); ?>"
                />
                <div class="absolute inset-y-0 right-3 flex items-center pr-3">
                    <img :src="getIssuerImage()" :alt="cardNumber" style="height: 100%;padding: 10px 0;">
                </div>

            </div>
        </div>
        <div class="field field-reserved">
            <div class="flex gap-x-2 gap-y-2">
                <div class="flex flex-col w-7/12">
                    <label for="buckaroo_creditcards_card_expiration">
                        <?= $escaper->escapeHtml(__('Expiration:')); ?>
                        <span class="text-red">*</span>
                    </label>
                    <input type="text"
                        maxlength="5"
                        x-model="cardExpiration"
                        data-validate='{"bk-ValidateYear": true, "bk-ValidateMonth": true}'
                        @change="onChange" id="buckaroo_creditcards_card_expiration"
                        name="buckaroo_creditcards_card_expiration"
                        placeholder="<?= $escaper->escapeHtml(__('MM/YY')); ?>"
                    />
                </div>

                <div class="flex flex-col w-5/12">
                    <label for="buckaroo_creditcards_card_cvc">
                        <?= $escaper->escapeHtml(__('CVC / CVV:')); ?>
                        <span class="text-red">*</span>
                    </label>
                    <input
                        type="text"
                        x-model="cardCvc"
                        maxlength="4"
                        data-validate='{"bk-validateCardCvc": true}'
                        @change="onChange" id="buckaroo_creditcards_card_cvc"
                        name="buckaroo_creditcards_card_cvc"
                        placeholder="<?= $escaper->escapeHtml(__('123')); ?>"
                    />
                </div>
            </div>
        </div>
    </form>
</div>